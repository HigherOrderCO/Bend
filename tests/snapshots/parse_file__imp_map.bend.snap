---
source: tests/golden_tests.rs
input_file: tests/golden_tests/parse_file/imp_map.bend
---
Maybe/unwrap: ((Maybe T) -> T)
(Maybe/unwrap m) = match m = m { Maybe/Some: m.value; Maybe/None: unreachable; }

Map/empty: (Map T)
(Map/empty) = Map/Leaf

Map/get: ((Map T) -> u24 -> (T, (Map T)))
(Map/get map key) = match map = map { Map/Leaf: (unreachable, map); Map/Node: switch %pred = (== 0 key) { 0: switch %pred = (== (% key 2) 0) { 0: let (got, rest) = (Map/get map.right (/ key 2)); (got, (Map/Node map.value map.left rest)); _ %pred-1: let (got, rest) = (Map/get map.left (/ key 2)); (got, (Map/Node map.value rest map.right)); }; _ %pred-1: ((Maybe/unwrap map.value), map); }; }

Map/set: ((Map T) -> u24 -> T -> (Map T))
(Map/set map key value) = match map = map { Map/Node: switch %pred = (== 0 key) { 0: switch %pred = (== (% key 2) 0) { 0: (Map/Node map.value map.left (Map/set map.right (/ key 2) value)); _ %pred-1: (Map/Node map.value (Map/set map.left (/ key 2) value) map.right); }; _ %pred-1: (Map/Node (Maybe/Some value) map.left map.right); }; Map/Leaf: switch %pred = (== 0 key) { 0: switch %pred = (== (% key 2) 0) { 0: (Map/Node Maybe/None Map/Leaf (Map/set Map/Leaf (/ key 2) value)); _ %pred-1: (Map/Node Maybe/None (Map/set Map/Leaf (/ key 2) value) Map/Leaf); }; _ %pred-1: (Map/Node (Maybe/Some value) Map/Leaf Map/Leaf); }; }

unreachable: Any
(unreachable) = *

unchecked main: Any
(main) = let x = (Map/set (Map/set Map/empty 2 1) 3 2); let (map/get%1, x) = (Map/get x 2); let y = (id map/get%1); let z = 4; let x = (Map/set x z 4); let (map/get%0, x) = (Map/get x z); (+ y map/get%0)

Maybe/Some/tag: _
(Maybe/Some/tag) = 0

Maybe/Some: (T -> (Maybe T))
(Maybe/Some) = λvalue λ%x (%x Maybe/Some/tag value)

Maybe/None/tag: _
(Maybe/None/tag) = 1

Maybe/None: (Maybe T)
(Maybe/None) = λ%x (%x Maybe/None/tag)

Map/Node/tag: _
(Map/Node/tag) = 0

Map/Node: ((Maybe T) -> (Map T) -> (Map T) -> (Map T))
(Map/Node) = λvalue λleft λright λ%x (%x Map/Node/tag value left right)

Map/Leaf/tag: _
(Map/Leaf/tag) = 1

Map/Leaf: (Map T)
(Map/Leaf) = λ%x (%x Map/Leaf/tag)
