---
source: tests/golden_tests.rs
input_file: tests/golden_tests/compile_core_o_no_all/bitonic_sort.hvm
---
[4m[1m[31mErrors:[0m
[1mThe following functions contain recursive cycles incompatible with HVM's strict evaluation:[0m
  * Down -> Flow -> Down
  * Warp -> Warp
  * Gen -> Gen
  * Rev -> Rev
  * Sort -> Sort
  and 1 other cycles...

The greedy eager evaluation of HVM may cause infinite loops.
[1mRefactor these functions to use lazy references instead of direct function calls.[0m
A reference is strict when it's being called ('(Foo x)') or when it's used non-linearly ('let x = Foo; (x x)').
It is lazy when it's an argument ('(x Foo)') or when it's used linearly ('let x = Foo; (x 0)').

[1mTry one of these strategies:[0m
- Use pattern matching with 'match', 'fold', and 'bend' to automatically lift expressions to lazy references.
- Replace direct calls with combinators. For example, change:
    'Foo = Î»a Î»b (b (Î»c (Foo a c)) a)'
  to:
    'Foo = Î»a Î»b (b (Î»c Î»a (Foo a c)) (Î»a a) a)'
  which is lifted to:
    'Foo = Î»a Î»b (b Foo__C1 Foo_C2 a)'
- Replace non-linear 'let' expressions with 'use' expressions. For example, change:
    'Foo = Î»f let x = Foo; (f x x)'
  to:
    'Foo = Î»f use x = Foo; (f x x)'
  which inlines to:
    'Foo = Î»f (f Foo Foo)'
- If disabled, re-enable the default 'float-combinators' and 'linearize-matches' compiler options.

For more information, visit: https://github.com/HigherOrderCO/hvm-lang/blob/main/docs/lazy-definitions.md.
To disable this check, use the "-Arecursion-cycle" compiler option.
