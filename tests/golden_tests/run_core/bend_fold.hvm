// should return (a+b+c) * 2^depth
data Tree = (Tree.node ~lft ~rgt) | (Tree.leaf val)

main =
  let depth = 2
  let a = 1;
  let b = 2;
  let c = 3;
  let n = 0;
  let tree = bend n while (< n depth) {
    (Tree.node (go (+ n 1)) (go (+ n 1)))
  } then {
    (Tree.leaf c)
  }
  fold tree with a {
    Tree.node: (+ tree.lft tree.rgt)
    Tree.leaf: (+ tree.val (+ a b))
  }
