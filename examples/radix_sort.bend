type Map_:
  Free
  Used
  Both {~a, ~b}

type Arr:
  Null
  Leaf {~a}
  Node {~a, ~b}

def swap(s, a, b):
  switch s:
    case 0:
      return (Map_/Both (a, b))
    case _:
      return (Map_/Both (b, a))
 

# Sort : Arr -> Arr
def sort(t):
  return to_arr(0, to_map(t))

# ToMap : Arr -> Map
def to_map(t):
  match t:
    case Arr/Null:
      return Map_/Free
    case Arr/Leaf:
      return radix(t.a)
    case Arr/Node:
      return merge(to_map(t.a), to_map(t.b))

# ToArr : U60 -> Map -> Arr
def to_arr(x, m):
  match m:
    case Map_/Free:
      return Arr/Null
    case Map_/Used:
      return Arr/Leaf(x)
    case Map_/Both:
      return Arr/Node(to_arr(x * 2, m.a), to_arr(x * 2 + 1, m.b))

# Merge : Map -> Map -> Map
def merge(a, b):
  match a:
    case Map_/Free:
      return b
    case Map_/Used:
      return Map_/Used
    case Map_/Both:
      match b:
        case Map_/Free:
          return a
        case Map_/Used:
          return Map_/Used
        case Map_/Both:
          return Map_/Both(merge(a.a, b.a), merge(a.b, b.b))
  
# Radix : U60 -> Map
def radix(n):
  r   = Map_/Used
  r1  = swap(n & 1, r, Map_/Free)
  r2  = swap(n & 2, r1, Map_/Free)
  r3  = swap(n & 4, r2, Map_/Free)
  r4  = swap(n & 8, r3, Map_/Free)
  r5  = swap(n & 16, r4, Map_/Free)
  return radix2(n, r5)

def radix2(n, r):
  r1  = swap(n & 32, r, Map_/Free)
  r2  = swap(n & 64, r1, Map_/Free)
  r3  = swap(n & 128, r2, Map_/Free)
  r4  = swap(n & 256, r3, Map_/Free)
  r5  = swap(n & 512, r4, Map_/Free)
  return radix3(n, r5)

def radix3(n, r):
  r1  = swap(n & 1024, r, Map_/Free)
  r2  = swap(n & 2048, r1, Map_/Free)
  r3  = swap(n & 4096, r2, Map_/Free)
  r4  = swap(n & 8192, r3, Map_/Free)
  r5  = swap(n & 16384, r4, Map_/Free)
  return radix4(n, r5)

def radix4(n, r):
  r1  = swap(n & 32768, r, Map_/Free)
  r2  = swap(n & 65536, r1, Map_/Free)
  r3  = swap(n & 131072, r2, Map_/Free)
  r4  = swap(n & 262144, r3, Map_/Free)
  r5  = swap(n & 524288, r4, Map_/Free)
  return radix5(n, r5)

def radix5(n, r):
  r1  = swap(n & 1048576, r, Map_/Free)
  r2  = swap(n & 2097152, r1, Map_/Free)
  r3  = swap(n & 4194304, r2, Map_/Free)
  r4  = swap(n & 8388608, r3, Map_/Free)
  return r4

def reverse(t):
  match t:
    case Arr/Null:
      return Arr/Null
    case Arr/Leaf:
      return t
    case Arr/Node:
      return Arr/Node(reverse(t.b), reverse(t.a))

# Sum : Arr -> U60
def sum(t):
  match t:
    case Arr/Null:
      return 0
    case Arr/Leaf:
      return t.a
    case Arr/Node:
      return sum(t.a) + sum(t.b)

# Gen : U60 -> Arr
def gen(n):
  return gen_go(n, 0)

def gen_go(n, x):
  switch n:
    case 0:
      return Arr/Leaf(x)
    case _:
      a = x * 2
      b = x * 2 + 1
      return Arr/Node(gen_go(n - 1, a), gen_go(n - 1, b))

Main = (sum(sort(reverse(gen 4))))
